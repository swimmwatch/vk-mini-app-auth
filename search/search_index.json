{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"vk-mini-app-auth","text":"<p>This Python package implements VK Mini Apps authentication algorithms. It is designed to be simple and easy to use, providing a straightforward way to authenticate users in VK Mini Apps.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy to use: The package is designed to be simple and intuitive, making it easy to integrate into your VK Mini App.</li> <li>Secure: It implements the authentication algorithms as described in the VK Mini Apps documentation, ensuring that your app's authentication is secure.</li> <li>Lightweight: The package is small and does not have any external dependencies, making it easy to include in your project without adding unnecessary bloat.</li> <li>Type hints: The package is fully typed, providing better code completion and type checking in your IDE.</li> <li>Well-documented: The package comes with comprehensive documentation, making it easy to understand how to use it effectively.</li> <li>Tested: The package includes unit tests to ensure that it works correctly and reliably.</li> <li>Supports Python 3.9+: The package is compatible with Python 3.9 and later versions, ensuring that it works with modern Python environments.</li> <li>Open source: The package is open source and licensed under the MIT License, allowing you to use it freely in your projects.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or later</li> <li>No external dependencies</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install vk-mini-app-auth\n# or\npoetry add vk-mini-app-auth\n# or\nuv add vk-mini-app-auth\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For detailed documentation, please visit the vk-mini-app-auth documentation.</p>"},{"location":"#license","title":"License","text":"<p><code>vk-mini-app-auth</code> is licensed under the MIT License.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Dmitry Vasiliev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"guide/install/","title":"Installation","text":"<p>Get started with vk-mini-app-auth.</p>"},{"location":"guide/install/#setup","title":"Setup","text":""},{"location":"guide/install/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you have <code>`python</code> and <code>pip</code> properly installed in your system. <pre><code>python --version\npip --version\n</code></pre></p> </li> <li> <p>Create a new directory and move into it to follow along with this tutorial. <pre><code>mkdir learn-twa-auth &amp;&amp; cd learn-twa-auth\n</code></pre></p> </li> </ul>"},{"location":"guide/install/#installation","title":"Installation","text":"<ul> <li> <p>Create a virtual environment and activate it. <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install <code>vk-mini-app-auth</code> using <code>pip</code>: <pre><code>pip install --upgrade vk-mini-app-auth\n</code></pre></p> </li> </ul>"},{"location":"guide/examples/django-ninja/","title":"Django Ninja","text":"<p>Here is an example of using VK Mini App authorization with Django Ninja, analogous to the Django middleware example.</p>"},{"location":"guide/examples/django-ninja/#using-with-django-ninja","title":"Using with Django Ninja","text":"<p>First, add variables to your <code>settings.py</code>: <pre><code># other settings...\n\nVK_SECRET_TOKEN = env.str(\"VK_SECRET_TOKEN\")\nVK_APP_ID = env.int(\"VK_APP_ID\")\n</code></pre></p> <p>Then, implement a dependency for authorization: <pre><code>import logging\n\nfrom django.conf import settings\nfrom django.http import HttpRequest\nfrom ninja.security import HttpBearer\nfrom vk_miniapp_auth.auth import VKMiniAppAuthenticator\nfrom vk_miniapp_auth.errors import InvalidInitDataError\n\nfrom users.services import UserService\n\nlogger = logging.getLogger(__name__)\n\nclass VKMiniAppAuth(HttpBearer):\n    def __init__(self):\n        self._vk_miniapp_authenticator = VKMiniAppAuthenticator(\n            settings.VK_APP_ID,\n            settings.VK_SECRET_TOKEN,\n        )\n\n    def authenticate(self, request: HttpRequest, token: str):\n        try:\n            launch_params = self._vk_miniapp_authenticator.get_launch_params(token)\n        except InvalidInitDataError:\n            logger.warning(\"Invalid VK init data\")\n            return None\n\n        if not launch_params or not launch_params.vk_user_id:\n            logger.warning(\"Missing VK user ID\")\n            return None\n\n        if not self._vk_miniapp_authenticator.is_signed(launch_params):\n            logger.warning(\"VK signature check failed\")\n            return None\n\n        user, _ = UserService.get_or_create(launch_params.vk_user_id)\n        logger.debug(\"User was authorized using VK\")\n        return user\n</code></pre></p> <p>Use the dependency in your Ninja API: <pre><code>from ninja import NinjaAPI\n\napi = NinjaAPI()\nvk_auth = VKMiniAppAuth()\n\n@api.get(\n    \"/protected\",\n    auth=[vk_auth],\n)\ndef protected_endpoint(request):\n    return {\"user_id\": request.user.id}\n</code></pre></p> <p>Add the API to your <code>urls.py</code>: <pre><code>from django.urls import path\nfrom .api import api\n\nurlpatterns = [\n    path(\"api/\", api.urls),\n]\n</code></pre></p> <p>This setup secures your Ninja endpoints using VK Mini App authentication, similar to the Django middleware approach.</p>"},{"location":"guide/examples/django/","title":"Django","text":""},{"location":"guide/examples/django/#using-with-django","title":"Using with Django","text":"<p>Let's create authorization middleware.</p> <p>Firstly, create variables in your <code>settings.py</code>: <pre><code># other settings...\n\nVK_SECRET_TOKEN = env.str(\"VK_SECRET_TOKEN\")\nVK_APP_ID = env.int(\"VK_APP_ID\")\n</code></pre></p> <p>Then implement middleware:</p> <pre><code>import logging\n\nfrom django.conf import settings\nfrom django.contrib.auth.models import User\nfrom django.http import HttpRequest\nfrom django.http import HttpResponse\nfrom vk_miniapp_auth.auth import VKMiniAppAuthenticator\nfrom vk_miniapp_auth.errors import InvalidInitDataError\n\nfrom users.services import UserService\n\nlogger = logging.getLogger(__name__)\n\n\nclass VKMiniAppAuthorizationMiddleware:\n    def __init__(self, get_response) -&gt; None:\n        self.get_response = get_response\n        self._vk_miniapp_authenticator = VKMiniAppAuthenticator(\n            settings.VK_APP_ID,\n            settings.VK_SECRET_TOKEN,\n        )\n\n    def __call__(self, request: HttpRequest) -&gt; HttpResponse:\n        # Code to be executed for each request before\n        # the view (and later middleware) are called.\n        auth_cred = request.headers.get(\"Authorization\")\n        if not auth_cred:\n            # TODO: handle error\n            pass\n\n        try:\n            launch_params = self._vk_miniapp_authenticator.get_launch_params(auth_cred)\n        except InvalidInitDataError:\n            # TODO: handle error\n            pass\n\n        if not launch_params or not launch_params.vk_user_id:\n            # TODO: handle error\n            pass\n\n        is_signed = self._vk_miniapp_authenticator.is_signed(launch_params)\n        if not is_signed:\n            # TODO: handle error\n            pass\n        else:\n            user, _ = UserService.get_or_create(launch_params.vk_user_id)\n            request.user = user\n\n            logger.debug(\"User was authorized using VK\")\n\n        response = self.get_response(request)\n\n        # Code to be executed for each request/response after\n        # the view is called.\n\n        return response\n</code></pre> <p>To use <code>VKMiniAppAuthorizationMiddleware</code>, add it to your <code>MIDDLEWARE</code> setting in <code>settings.py</code>: <pre><code>MIDDLEWARE = [\n    # other middleware classes\n    'path.to.VKMiniAppAuthorizationMiddleware',\n]\n</code></pre></p>"},{"location":"guide/examples/fastapi/","title":"FastAPI","text":"<p>Here is a Markdown example for using VK Mini App authorization with FastAPI, analogous to the Django and Django Ninja examples.</p>"},{"location":"guide/examples/fastapi/#using-with-fastapi","title":"Using with FastAPI","text":"<p>Implement a dependency for authorization: <pre><code>import logging\nimport os\nfrom fastapi import Depends, FastAPI, HTTPException, Request, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom vk_miniapp_auth.auth import VKMiniAppAuthenticator\nfrom vk_miniapp_auth.errors import InvalidInitDataError\nfrom users.services import UserService\n\nlogger = logging.getLogger(__name__)\n\nclass VKMiniAppAuth(HTTPBearer):\n    def __init__(self):\n        super().__init__()\n        self._vk_miniapp_authenticator = VKMiniAppAuthenticator(\n            int(os.environ[\"VK_APP_ID\"]),\n            os.environ[\"VK_SECRET_TOKEN\"],\n        )\n\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super().__call__(request)\n        token = credentials.credentials if credentials else None\n\n        if not token:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Missing token\")\n\n        try:\n            launch_params = self._vk_miniapp_authenticator.get_launch_params(token)\n        except InvalidInitDataError:\n            logger.warning(\"Invalid VK init data\")\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid VK init data\")\n\n        if not launch_params or not launch_params.vk_user_id:\n            logger.warning(\"Missing VK user ID\")\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Missing VK user ID\")\n\n        if not self._vk_miniapp_authenticator.is_signed(launch_params):\n            logger.warning(\"VK signature check failed\")\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"VK signature check failed\")\n\n        user, _ = UserService.get_or_create(launch_params.vk_user_id)\n        logger.debug(\"User was authorized using VK\")\n        return user\n</code></pre></p> <p>Use the dependency in your FastAPI app: <pre><code>from fastapi import FastAPI, Depends\nfrom .auth import VKMiniAppAuth\n\napp = FastAPI()\nvk_auth = VKMiniAppAuth()\n\n@app.get(\"/protected\")\nasync def protected_endpoint(user=Depends(vk_auth)):\n    return {\"user_id\": user.id}\n</code></pre></p> <p>This setup secures your FastAPI endpoints using VK Mini App authentication, similar to the Django and Django Ninja approaches.</p>"},{"location":"references/auth/","title":"Authorization","text":"<p>VK Mini App Authenticator utilities.</p>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator","title":"<code>VKMiniAppAuthenticator</code>","text":"<p>VK Mini App Authenticator for validating launch parameters.</p> <p>This class provides methods to extract, validate, and check the expiration of launch parameters. It uses the VK application ID and secret key to verify the signature of the parameters. The launch parameters are expected to be provided in the authorization header as a base64 encoded URL.</p> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>class VKMiniAppAuthenticator:\n    \"\"\"VK Mini App Authenticator for validating launch parameters.\n\n    This class provides methods to extract, validate, and check the expiration of launch parameters.\n    It uses the VK application ID and secret key to verify the signature of the parameters.\n    The launch parameters are expected to be provided in the authorization header as a base64 encoded URL.\n    \"\"\"\n\n    def __init__(self, app_id: int, app_secret: str, ttl: typing.Optional[timedelta] = None):\n        \"\"\"Initializes the VK Mini App Authenticator.\n\n        Args:\n            app_id (int): The VK application ID.\n            app_secret (str): The VK application secret key.\n            ttl (timedelta, optional): Time to live for the launch parameters. Defaults to 1 hour.\n        \"\"\"\n        self._app_id = app_id\n        self._app_secret = app_secret\n        self._ttl = ttl or timedelta(hours=1)\n\n    def get_launch_params(self, authorization_header: str) -&gt; typing.Optional[VkLaunchParams]:\n        \"\"\"Extracts and validates launch parameters from the authorization header.\n\n        Args:\n            authorization_header (str): The authorization header containing the launch parameters.\n\n        Returns:\n            VkLaunchParams: An instance of VkLaunchParams if valid, otherwise None.\n        \"\"\"\n        query_params_url = self.extract_query_params_as_url(authorization_header)\n        query_params = self.extract_query_params_as_dict(query_params_url)\n        if not query_params:\n            return None\n\n        return VkLaunchParams(**query_params)\n\n    @staticmethod\n    def extract_query_params_as_url(authorization_header: str) -&gt; str:\n        \"\"\"Extracts the query parameters from the authorization header.\n\n        Args:\n            authorization_header (str): The authorization header containing the base64 encoded query parameters.\n\n        Returns:\n            str: The decoded query parameters as a URL.\n        \"\"\"\n        if not authorization_header:\n            raise ValueError(\"Missing authorization header value\")\n\n        authorization_header = authorization_header.strip()\n\n        try:\n            return base64.b64decode(authorization_header).decode(\"utf-8\")\n        except ValueError as err:\n            logger.error(\"Failed to decode authorization header: %s\", err)\n            raise InvalidInitDataError(\"Invalid authorization header format\") from err\n\n    @staticmethod\n    def extract_query_params_as_dict(query_params_url: str) -&gt; QueryParams:\n        \"\"\"Extracts query parameters from a URL and returns them as a dictionary.\n\n        Args:\n            query_params_url (str): The URL containing the query parameters.\n\n        Returns:\n            QueryParams: A dictionary containing the query parameters.\n        \"\"\"\n        query_string = urlparse(query_params_url).query\n        query_params = parse_qs(query_string, keep_blank_values=True)\n        return {k: v[0] if isinstance(v, list) else \"\" for k, v in query_params.items()}\n\n    def is_signed(self, launch_params: VkLaunchParams) -&gt; bool:\n        \"\"\"Validates the signature of the launch parameters. Also checks if the parameters are not expired.\n\n        Args:\n            launch_params (VkLaunchParams): The launch parameters to validate.\n\n        Returns:\n            bool: True if the launch parameters are valid and signed correctly, False otherwise.\n        \"\"\"\n        if self._app_id != launch_params.vk_app_id:\n            logger.debug(\"Invalid VK app ID. Expected: %s, got: %s\", self._app_id, launch_params.vk_app_id)\n            return False\n\n        if self.is_expired(launch_params):\n            logger.debug(\n                \"Launch parameters are expired. Timestamp: %s, TTL: %s\",\n                launch_params.vk_ts,\n                self._ttl,\n            )\n            return False\n\n        vk_params = {k: v for k, v in launch_params.get_data().items() if k.startswith(\"vk_\")}\n        sorted_vk_params = dict(sorted(vk_params.items()))\n\n        sign_params_query = urlencode(sorted_vk_params)\n        sign = (\n            base64.urlsafe_b64encode(\n                hmac.new(\n                    self._app_secret.encode(),\n                    sign_params_query.encode(),\n                    hashlib.sha256,\n                ).digest()\n            )\n            .decode()\n            .rstrip(\"=\")\n        )\n\n        return sign == launch_params.sign\n\n    def is_expired(self, launch_params: VkLaunchParams) -&gt; bool:\n        \"\"\"Checks if the launch parameters are expired based on the TTL.\n\n        Args:\n            launch_params (VkLaunchParams): The launch parameters to check.\n\n        Returns:\n            bool: True if the launch parameters are expired, False otherwise.\n        \"\"\"\n        now = datetime.now(timezone.utc)\n        return (now - launch_params.vk_ts) &gt; self._ttl\n</code></pre>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator.__init__","title":"<code>__init__(app_id, app_secret, ttl=None)</code>","text":"<p>Initializes the VK Mini App Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>app_id</code> <code>int</code> <p>The VK application ID.</p> required <code>app_secret</code> <code>str</code> <p>The VK application secret key.</p> required <code>ttl</code> <code>timedelta</code> <p>Time to live for the launch parameters. Defaults to 1 hour.</p> <code>None</code> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>def __init__(self, app_id: int, app_secret: str, ttl: typing.Optional[timedelta] = None):\n    \"\"\"Initializes the VK Mini App Authenticator.\n\n    Args:\n        app_id (int): The VK application ID.\n        app_secret (str): The VK application secret key.\n        ttl (timedelta, optional): Time to live for the launch parameters. Defaults to 1 hour.\n    \"\"\"\n    self._app_id = app_id\n    self._app_secret = app_secret\n    self._ttl = ttl or timedelta(hours=1)\n</code></pre>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator.extract_query_params_as_dict","title":"<code>extract_query_params_as_dict(query_params_url)</code>  <code>staticmethod</code>","text":"<p>Extracts query parameters from a URL and returns them as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>query_params_url</code> <code>str</code> <p>The URL containing the query parameters.</p> required <p>Returns:</p> Name Type Description <code>QueryParams</code> <code>QueryParams</code> <p>A dictionary containing the query parameters.</p> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>@staticmethod\ndef extract_query_params_as_dict(query_params_url: str) -&gt; QueryParams:\n    \"\"\"Extracts query parameters from a URL and returns them as a dictionary.\n\n    Args:\n        query_params_url (str): The URL containing the query parameters.\n\n    Returns:\n        QueryParams: A dictionary containing the query parameters.\n    \"\"\"\n    query_string = urlparse(query_params_url).query\n    query_params = parse_qs(query_string, keep_blank_values=True)\n    return {k: v[0] if isinstance(v, list) else \"\" for k, v in query_params.items()}\n</code></pre>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator.extract_query_params_as_url","title":"<code>extract_query_params_as_url(authorization_header)</code>  <code>staticmethod</code>","text":"<p>Extracts the query parameters from the authorization header.</p> <p>Parameters:</p> Name Type Description Default <code>authorization_header</code> <code>str</code> <p>The authorization header containing the base64 encoded query parameters.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The decoded query parameters as a URL.</p> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>@staticmethod\ndef extract_query_params_as_url(authorization_header: str) -&gt; str:\n    \"\"\"Extracts the query parameters from the authorization header.\n\n    Args:\n        authorization_header (str): The authorization header containing the base64 encoded query parameters.\n\n    Returns:\n        str: The decoded query parameters as a URL.\n    \"\"\"\n    if not authorization_header:\n        raise ValueError(\"Missing authorization header value\")\n\n    authorization_header = authorization_header.strip()\n\n    try:\n        return base64.b64decode(authorization_header).decode(\"utf-8\")\n    except ValueError as err:\n        logger.error(\"Failed to decode authorization header: %s\", err)\n        raise InvalidInitDataError(\"Invalid authorization header format\") from err\n</code></pre>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator.get_launch_params","title":"<code>get_launch_params(authorization_header)</code>","text":"<p>Extracts and validates launch parameters from the authorization header.</p> <p>Parameters:</p> Name Type Description Default <code>authorization_header</code> <code>str</code> <p>The authorization header containing the launch parameters.</p> required <p>Returns:</p> Name Type Description <code>VkLaunchParams</code> <code>Optional[VkLaunchParams]</code> <p>An instance of VkLaunchParams if valid, otherwise None.</p> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>def get_launch_params(self, authorization_header: str) -&gt; typing.Optional[VkLaunchParams]:\n    \"\"\"Extracts and validates launch parameters from the authorization header.\n\n    Args:\n        authorization_header (str): The authorization header containing the launch parameters.\n\n    Returns:\n        VkLaunchParams: An instance of VkLaunchParams if valid, otherwise None.\n    \"\"\"\n    query_params_url = self.extract_query_params_as_url(authorization_header)\n    query_params = self.extract_query_params_as_dict(query_params_url)\n    if not query_params:\n        return None\n\n    return VkLaunchParams(**query_params)\n</code></pre>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator.is_expired","title":"<code>is_expired(launch_params)</code>","text":"<p>Checks if the launch parameters are expired based on the TTL.</p> <p>Parameters:</p> Name Type Description Default <code>launch_params</code> <code>VkLaunchParams</code> <p>The launch parameters to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the launch parameters are expired, False otherwise.</p> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>def is_expired(self, launch_params: VkLaunchParams) -&gt; bool:\n    \"\"\"Checks if the launch parameters are expired based on the TTL.\n\n    Args:\n        launch_params (VkLaunchParams): The launch parameters to check.\n\n    Returns:\n        bool: True if the launch parameters are expired, False otherwise.\n    \"\"\"\n    now = datetime.now(timezone.utc)\n    return (now - launch_params.vk_ts) &gt; self._ttl\n</code></pre>"},{"location":"references/auth/#vk_miniapp_auth.auth.VKMiniAppAuthenticator.is_signed","title":"<code>is_signed(launch_params)</code>","text":"<p>Validates the signature of the launch parameters. Also checks if the parameters are not expired.</p> <p>Parameters:</p> Name Type Description Default <code>launch_params</code> <code>VkLaunchParams</code> <p>The launch parameters to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the launch parameters are valid and signed correctly, False otherwise.</p> Source code in <code>vk_miniapp_auth/auth.py</code> <pre><code>def is_signed(self, launch_params: VkLaunchParams) -&gt; bool:\n    \"\"\"Validates the signature of the launch parameters. Also checks if the parameters are not expired.\n\n    Args:\n        launch_params (VkLaunchParams): The launch parameters to validate.\n\n    Returns:\n        bool: True if the launch parameters are valid and signed correctly, False otherwise.\n    \"\"\"\n    if self._app_id != launch_params.vk_app_id:\n        logger.debug(\"Invalid VK app ID. Expected: %s, got: %s\", self._app_id, launch_params.vk_app_id)\n        return False\n\n    if self.is_expired(launch_params):\n        logger.debug(\n            \"Launch parameters are expired. Timestamp: %s, TTL: %s\",\n            launch_params.vk_ts,\n            self._ttl,\n        )\n        return False\n\n    vk_params = {k: v for k, v in launch_params.get_data().items() if k.startswith(\"vk_\")}\n    sorted_vk_params = dict(sorted(vk_params.items()))\n\n    sign_params_query = urlencode(sorted_vk_params)\n    sign = (\n        base64.urlsafe_b64encode(\n            hmac.new(\n                self._app_secret.encode(),\n                sign_params_query.encode(),\n                hashlib.sha256,\n            ).digest()\n        )\n        .decode()\n        .rstrip(\"=\")\n    )\n\n    return sign == launch_params.sign\n</code></pre>"},{"location":"references/data/","title":"Data","text":""},{"location":"references/data/#vk_miniapp_auth.data.LanguageEnum","title":"<code>LanguageEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Represents the language codes used in VK launch parameters.</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>class LanguageEnum(str, enum.Enum):\n    \"\"\"Represents the language codes used in VK launch parameters.\"\"\"\n\n    RU = \"ru\"\n    UK = \"uk\"\n    UA = \"ua\"\n    BE = \"be\"\n    KZ = \"kz\"\n    PT = \"pt\"\n    ES = \"es\"\n    EN = \"en\"\n</code></pre>"},{"location":"references/data/#vk_miniapp_auth.data.PlatformEnum","title":"<code>PlatformEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Represents the platform codes used in VK launch parameters.</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>class PlatformEnum(str, enum.Enum):\n    \"\"\"Represents the platform codes used in VK launch parameters.\"\"\"\n\n    # The platform on which the application was launched:\n    DESKTOP_WEB = \"desktop_web\"\n    MOBILE_WEB = \"mobile_web\"\n    MOBILE_ANDROID = \"mobile_android\"\n    MOBILE_IPAD = \"mobile_ipad\"\n    MOBILE_IPHONE = \"mobile_iphone\"\n\n    # If the mini app was launched from VK Messenger:\n    DESKTOP_APP_MESSENGER = \"desktop_app_messenger\"\n    DESKTOP_WEB_MESSENGER = \"desktop_web_messenger\"\n    MOBILE_ANDROID_MESSENGER = \"mobile_android_messenger\"\n    MOBILE_IPHONE_MESSENGER = \"mobile_iphone_messenger\"\n\n    # If the mini app was launched from outside VK or VK Messenger\n    ANDROID_EXTERNAL = \"android_external\"\n    IPHONE_EXTERNAL = \"iphone_external\"\n    IPAD_EXTERNAL = \"ipad_external\"\n    MVK_EXTERNAL = \"mvk_external\"\n    WEB_EXTERNAL = \"web_external\"\n</code></pre>"},{"location":"references/data/#vk_miniapp_auth.data.ViewerGroupRoleEnum","title":"<code>ViewerGroupRoleEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Represents the group role of the viewer in VK launch parameters.</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>class ViewerGroupRoleEnum(str, enum.Enum):\n    \"\"\"Represents the group role of the viewer in VK launch parameters.\"\"\"\n\n    NONE = \"none\"\n    ADMIN = \"admin\"\n    EDITOR = \"editor\"\n    MEMBER = \"member\"\n    MODERATOR = \"moder\"\n</code></pre>"},{"location":"references/data/#vk_miniapp_auth.data.VkLaunchParams","title":"<code>VkLaunchParams</code>  <code>dataclass</code>","text":"<p>Represents passed launch parameters from VK.</p> Links <p>https://dev.vk.com/en/mini-apps/development/launch-params</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>@dataclasses.dataclass\nclass VkLaunchParams:\n    \"\"\"Represents passed launch parameters from VK.\n\n    Links:\n        https://dev.vk.com/en/mini-apps/development/launch-params\n    \"\"\"\n\n    sign: str\n    vk_access_token_settings: typing.List[str]\n    vk_app_id: int\n    vk_are_notifications_enabled: bool\n    vk_is_app_user: bool\n    vk_is_favorite: bool\n    vk_language: \"LanguageEnum\"\n    vk_platform: \"PlatformEnum\"\n    vk_ts: datetime\n    vk_user_id: int\n    vk_chat_id: typing.Optional[str] = None\n    vk_group_id: typing.Optional[int] = None\n    vk_has_profile_button: typing.Optional[bool] = None\n    vk_is_play_machine: typing.Optional[bool] = None\n    vk_is_recommended: typing.Optional[bool] = None\n    vk_is_widescreen: typing.Optional[bool] = None\n    vk_profile_id: typing.Optional[int] = None\n    vk_request_key: typing.Optional[str] = None\n    vk_testing_group_id: typing.Optional[int] = None\n    vk_ref: typing.Optional[str] = None\n    vk_viewer_group_role: typing.Optional[\"ViewerGroupRoleEnum\"] = None\n\n    def __init__(self, **kwargs: typing.Any):\n        \"\"\"Initialize the VkLaunchParams with keyword arguments.\"\"\"\n        self._data = kwargs\n\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n        self.__post_init__()\n\n    def __post_init__(self):\n        \"\"\"Post-initialization processing to convert types and validate data.\"\"\"\n        try:\n            self.vk_app_id = int(self.vk_app_id)\n            self.vk_user_id = int(self.vk_user_id)\n            self.vk_access_token_settings = self.vk_access_token_settings.split(\",\")  # type: ignore[attr-defined]\n            self.vk_ts = datetime.fromtimestamp(float(self.vk_ts), timezone.utc)  # type: ignore[arg-type]\n            self.vk_are_notifications_enabled = bool(int(self.vk_are_notifications_enabled))\n            self.vk_is_app_user = bool(int(self.vk_is_app_user))\n            self.vk_is_favorite = bool(int(self.vk_is_favorite))\n            self.vk_language = LanguageEnum(self.vk_language)\n            self.vk_platform = PlatformEnum(self.vk_platform)\n\n            if self.vk_has_profile_button is not None:\n                self.vk_has_profile_button = bool(int(self.vk_has_profile_button))\n\n            if self.vk_is_play_machine is not None:\n                self.vk_is_play_machine = bool(int(self.vk_is_play_machine))\n\n            if self.vk_is_recommended is not None:\n                self.vk_is_recommended = bool(int(self.vk_is_recommended))\n\n            if self.vk_is_widescreen is not None:\n                self.vk_is_widescreen = bool(int(self.vk_is_widescreen))\n\n            if self.vk_viewer_group_role is not None:\n                self.vk_viewer_group_role = ViewerGroupRoleEnum(self.vk_viewer_group_role)\n        except ValueError as err:\n            raise InvalidInitDataError(\"Invalid launch parameters\") from err\n\n    def get_data(self) -&gt; typing.Dict[str, typing.Any]:\n        \"\"\"Return the launch parameters as a dictionary.\"\"\"\n        return self._data\n</code></pre>"},{"location":"references/data/#vk_miniapp_auth.data.VkLaunchParams.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize the VkLaunchParams with keyword arguments.</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>def __init__(self, **kwargs: typing.Any):\n    \"\"\"Initialize the VkLaunchParams with keyword arguments.\"\"\"\n    self._data = kwargs\n\n    for key, value in kwargs.items():\n        setattr(self, key, value)\n\n    self.__post_init__()\n</code></pre>"},{"location":"references/data/#vk_miniapp_auth.data.VkLaunchParams.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Post-initialization processing to convert types and validate data.</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Post-initialization processing to convert types and validate data.\"\"\"\n    try:\n        self.vk_app_id = int(self.vk_app_id)\n        self.vk_user_id = int(self.vk_user_id)\n        self.vk_access_token_settings = self.vk_access_token_settings.split(\",\")  # type: ignore[attr-defined]\n        self.vk_ts = datetime.fromtimestamp(float(self.vk_ts), timezone.utc)  # type: ignore[arg-type]\n        self.vk_are_notifications_enabled = bool(int(self.vk_are_notifications_enabled))\n        self.vk_is_app_user = bool(int(self.vk_is_app_user))\n        self.vk_is_favorite = bool(int(self.vk_is_favorite))\n        self.vk_language = LanguageEnum(self.vk_language)\n        self.vk_platform = PlatformEnum(self.vk_platform)\n\n        if self.vk_has_profile_button is not None:\n            self.vk_has_profile_button = bool(int(self.vk_has_profile_button))\n\n        if self.vk_is_play_machine is not None:\n            self.vk_is_play_machine = bool(int(self.vk_is_play_machine))\n\n        if self.vk_is_recommended is not None:\n            self.vk_is_recommended = bool(int(self.vk_is_recommended))\n\n        if self.vk_is_widescreen is not None:\n            self.vk_is_widescreen = bool(int(self.vk_is_widescreen))\n\n        if self.vk_viewer_group_role is not None:\n            self.vk_viewer_group_role = ViewerGroupRoleEnum(self.vk_viewer_group_role)\n    except ValueError as err:\n        raise InvalidInitDataError(\"Invalid launch parameters\") from err\n</code></pre>"},{"location":"references/data/#vk_miniapp_auth.data.VkLaunchParams.get_data","title":"<code>get_data()</code>","text":"<p>Return the launch parameters as a dictionary.</p> Source code in <code>vk_miniapp_auth/data.py</code> <pre><code>def get_data(self) -&gt; typing.Dict[str, typing.Any]:\n    \"\"\"Return the launch parameters as a dictionary.\"\"\"\n    return self._data\n</code></pre>"},{"location":"references/errors/","title":"Errors","text":""},{"location":"references/errors/#vk_miniapp_auth.errors.BaseVMAError","title":"<code>BaseVMAError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all VK Mini App related exceptions.</p> Source code in <code>vk_miniapp_auth/errors.py</code> <pre><code>class BaseVMAError(Exception):\n    \"\"\"Base class for all VK Mini App related exceptions.\"\"\"\n\n    pass\n</code></pre>"},{"location":"references/errors/#vk_miniapp_auth.errors.InvalidInitDataError","title":"<code>InvalidInitDataError</code>","text":"<p>               Bases: <code>BaseVMAError</code></p> <p>Raised when the initialization data is invalid.</p> Source code in <code>vk_miniapp_auth/errors.py</code> <pre><code>class InvalidInitDataError(BaseVMAError):\n    \"\"\"Raised when the initialization data is invalid.\"\"\"\n\n    pass\n</code></pre>"},{"location":"coverage/","title":"Coverage","text":""}]}